#pragma once


#include "../testing_Proxie.h"
#include "jmsf/patterning/mixing/mixin_Object.h"

#include "jmsf/pointing/Pointer.hpp"

#include "realizing_factory_Pointie_and_Proxie.hxx"
#include "jmsf/pointing/sensing/sensing_Pointie.hxx"
#include "jmsf/memorying/Constructor.hxx"


namespace jmsf {
namespace pointing {
namespace testing {
namespace realizing {


class realizing_testing_Proxie :
	public testing_Proxie,
	public patterning::mixing::mixin_Object
{

public:
	// virtuals testing_Proxie

	//~virtuals

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
public:

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
private:
	// virtual
	~realizing_testing_Proxie() noexcept;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
private: friend memorying::Constructor< testing_Proxie, realizing_testing_Proxie >;
	realizing_testing_Proxie(
		const ::jmsf::pointing::Pointer< sensing::sensing_Pointie > &sensing_pointie ) noexcept;

private: friend realizing_factory_Pointie_and_Proxie;
	static Proxy< testing_Proxie > create(
		const memorying::Womp< memorying::Allocator > &reference_counters_allocator,
		const memorying::Womp< memorying::Allocator > &testing_proxie_allocator,
		const ::jmsf::pointing::Pointer< sensing::sensing_Pointie > &sensing_pointie ) noexcept;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
protected:
	// virtual
//	::jmsf::pointing::Proxy< testing_Proxie > createClone() const noexcept;

private:
	realizing_testing_Proxie( const realizing_testing_Proxie &other ) noexcept;
	const realizing_testing_Proxie &operator =( const realizing_testing_Proxie &other ) noexcept;

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
private:
	::jmsf::pointing::Pointer< sensing::sensing_Pointie > _sensingPointie;
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
private:

};


} // namespace realizing
} // namespace testing
} // namespace pointing
} // namespace jmsf
