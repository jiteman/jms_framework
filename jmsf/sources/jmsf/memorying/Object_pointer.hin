#pragma once

#include "Object_pointer.hpp"


#include "jmsf/texting/Ansii_text.h"
#include "jmsf/texting/Ansii_allocating_assistor.h"
#include "jmsf/pointing/cShared.hin"
#include "jmsf/memorying/Womp.hin"
#include "jmsf/typeing/Naturals.hin"
#include "jmsf/typeing/Boolean.h"

#include "jmsf/validating/macroses_Should.h"
#include "jmsf/validating/macroses_Type_name.h"

#include <utility>


namespace jmsf {
namespace memorying {


template< class A_type >
typeing::Boolean Object_pointer< A_type >::is_empty() const noexcept {
	return typeing::Boolean::create( _the_pointer_to_object == nullptr );
}

template< class A_type >
typeing::Boolean Object_pointer< A_type >::is_not_empty() const noexcept {
	return !is_empty();
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
typeing::Memory_natural Object_pointer< A_type >::get_address() const {
	jmsf_Should_never_be_empty_native_pointer_with_type( _the_pointer_to_object, JMSF_TYPE_NAME( A_type ) );
	return typeing::create_address_from_pointer( _the_pointer_to_object );
}

template< class A_type >
const A_type *Object_pointer< A_type >::get() const {
	jmsf_Should_never_be_empty_native_pointer_with_type( _the_pointer_to_object, JMSF_TYPE_NAME( A_type ) );
	return _the_pointer_to_object;
}

template< class A_type >
A_type *Object_pointer< A_type >::take() {
	jmsf_Should_never_be_empty_native_pointer_with_type( _the_pointer_to_object, JMSF_TYPE_NAME( A_type ) );
	return _the_pointer_to_object;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
typeing::Boolean Object_pointer< A_type >::operator ==( const Object_pointer< A_type > &another ) const noexcept {
	return typeing::Boolean::create( _the_pointer_to_object == another._the_pointer_to_object );
}

template< class A_type >
typeing::Boolean Object_pointer< A_type >::operator !=( const Object_pointer< A_type > &another ) const noexcept {
	return !operator ==( another );
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
pointing::cShared< texting::Ansii_text > Object_pointer< A_type >::to_ansii_text( const memorying::Womp< texting::Ansii_allocating_assistor > &an_aaa ) const {
	pointing::Shared< texting::Ansii_stream > ansii_stream = an_aaa->create_ansii_stream();
	ansii_stream->put( typeing::create_address_from_pointer( _the_pointer_to_object ), typeing::True );
	return texting::Aaa_cs( an_aaa, ansii_stream );
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
template< class A_type >
Object_pointer< A_type >::~Object_pointer() noexcept
{}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Object_pointer< A_type >::Object_pointer() noexcept
	:
		_the_pointer_to_object( nullptr )
{}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Object_pointer< A_type >::Object_pointer( const A_type *a_pointer_to_object ) noexcept
	:
		_the_pointer_to_object( const_cast< A_type * >( a_pointer_to_object ) )
{}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// static
template< class A_type >
Object_pointer< A_type > Object_pointer< A_type >::create_from_pointer( const A_type *a_pointer_to_object ) {
	jmsf_Should_never_be_empty_native_pointer_with_type( a_pointer_to_object, JMSF_TYPE_NAME( A_type ) );
	return Object_pointer< A_type >( a_pointer_to_object );
}

// static
template< class A_type >
Object_pointer< A_type > Object_pointer< A_type >::create_from_address( const typeing::Memory_natural an_address ) {
	if ( an_address.is_nil() ) {
		jmsf_Should_never_be_empty( Object_pointer< A_type >() ); // for A_type
	}

	return
		Object_pointer< A_type >(
			typeing::get_pointer_from_Memory_natural< A_type >(
				an_address ) );
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Object_pointer< A_type >::Object_pointer( const Object_pointer< A_type > &another ) noexcept
	:
		_the_pointer_to_object( another._the_pointer_to_object )
{}

template< class A_type >
const Object_pointer< A_type > &Object_pointer< A_type >::operator =( const Object_pointer< A_type > &another ) noexcept {
	if ( &another == this ) return *this;

	_the_pointer_to_object = another._the_pointer_to_object;
	return *this;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Object_pointer< A_type >::Object_pointer( Object_pointer< A_type > &&another ) noexcept
	:
		_the_pointer_to_object( another._the_pointer_to_object )
{
	another._the_pointer_to_object = nullptr;
}

template< class A_type >
Object_pointer< A_type > &Object_pointer< A_type >::operator =( Object_pointer< A_type > &&another ) noexcept {
	if ( &another == this ) return *this;

	_the_pointer_to_object = another._the_pointer_to_object;
	another._the_pointer_to_object = nullptr;
	return *this;
}

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


} // namespace memorying
} // namespace jmsf
