#pragma once

#include "Avl_tree_node.hpp"


#include "jmsf/memorying/Constructor.hin"
#include "jmsf/memorying/Destructor.hin"
#include "jmsf/memorying/Womp.hin"
#include "jmsf/memorying/Omp.hin"
#include "jmsf/memorying/Allocator.h"
#include "jmsf/typeing/Integers.hin"
#include "jmsf/typeing/Naturals.hin"
#include "jmsf/typeing/Boolean.h"
#include "jmsf/algorithming/Mathematics.hin"

#include "jmsf/validating/macroses_Should.h"


namespace jmsf {
namespace structing {
namespace noding {


template< class A_type >
typeing::Boolean Avl_tree_node< A_type >::is_empty() const noexcept {
	return typeing::True;
}

template< class A_type >
typeing::Boolean Avl_tree_node< A_type >::is_not_empty() const noexcept {
	return !is_empty();
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
const A_type &Avl_tree_node< A_type >::get_object() const {
	return _the_object;
}

template< class A_type >
A_type &Avl_tree_node< A_type >::take_object() {
	return _the_object;
}

template< class A_type >
void Avl_tree_node< A_type >::set_left_child( const memorying::Omp< Avl_tree_node< A_type > > &a_left_child ) {
	_left_child_node = a_left_child;
}

template< class A_type >
memorying::Omp< Avl_tree_node< A_type > > &Avl_tree_node< A_type >::take_left_child() {
	return _left_child_node;
}

template< class A_type >
const memorying::Omp< Avl_tree_node< A_type > > &Avl_tree_node< A_type >::get_left_child() const {
	return _left_child_node;
}

template< class A_type >
void Avl_tree_node< A_type >::set_right_child( const memorying::Omp< Avl_tree_node< A_type > > &a_right_child ) {
	_right_child_node = a_right_child;
}

template< class A_type >
memorying::Omp< Avl_tree_node< A_type > > &Avl_tree_node< A_type >::take_right_child() {
	return _right_child_node;
}

template< class A_type >
const memorying::Omp< Avl_tree_node< A_type > > &Avl_tree_node< A_type >::get_right_child() const {
	return _right_child_node;
}

template< class A_type >
void Avl_tree_node< A_type >::set_parent( const memorying::Omp< Avl_tree_node< A_type > > &a_parent ) {
	_parent_node = a_parent;
}

template< class A_type >
memorying::Omp< Avl_tree_node< A_type > > &Avl_tree_node< A_type >::take_parent() {
	return _parent_node;
}

template< class A_type >
const memorying::Omp< Avl_tree_node< A_type > > &Avl_tree_node< A_type >::get_parent() const {
	return _parent_node;
}

template< class A_type >
typeing::Memory_natural Avl_tree_node< A_type >::get_height() const noexcept {
	return _the_height;
}

template< class A_type >
void Avl_tree_node< A_type >::recalculate_height() noexcept {
	const typeing::Memory_natural left_subtree_height = _left_child_node.is_empty() ? typeing::Memory_natural_nil : _left_child_node->get_height();
	const typeing::Memory_natural right_subtree_height = _right_child_node.is_empty() ? typeing::Memory_natural_nil : _right_child_node->get_height();

	_the_height = typeing::Memory_natural_one + algorithming::Mathematics::maximum( left_subtree_height, right_subtree_height );
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
template< class A_type >
Avl_tree_node< A_type >::~Avl_tree_node() noexcept
{}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Avl_tree_node< A_type >::Avl_tree_node() noexcept
{}

template< class A_type >
Avl_tree_node< A_type >::Avl_tree_node( const A_type &an_object ) noexcept
	:
		_the_object( an_object ),
		_the_height( typeing::Memory_natural_one )
{}

//template< class A_type >
//Avl_tree_node< A_type >::Avl_tree_node( const A_type &an_object, memorying::Omp< Avl_tree_node > &a_parent ) noexcept
//	:
//		_the_object( an_object ),
//		_parent_node( a_parent )
//{}

template< class A_type >
// static
memorying::Omp< Avl_tree_node< A_type > > Avl_tree_node< A_type >::create(
	const memorying::Womp< memorying::Allocator > &avl_tree_node_allocator,
	const A_type &an_object )
{
	jmsf_Should_never_be_empty( avl_tree_node_allocator );

	return
		memorying::Constructor< noding::Avl_tree_node< A_type >, noding::Avl_tree_node< A_type > >::construct(
			avl_tree_node_allocator,
			an_object );
}

template< class A_type >
// static
void Avl_tree_node< A_type >::destroy( const memorying::Omp< Avl_tree_node< A_type > > &avl_tree_node ) {
	memorying::Destructor< Avl_tree_node< A_type > >::destruct( avl_tree_node );
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//template< class A_type >
//Avl_tree_node< A_type >::Avl_tree_node( const Avl_tree_node< A_type > &/*another*/ ) noexcept {
//}

//template< class A_type >
//const Avl_tree_node< A_type > &Avl_tree_node< A_type >::operator =( const Avl_tree_node< A_type > &another ) noexcept {
//	if ( &another == this ) return *this;

//	// copy
//	return *this;
//}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//template< class A_type >
//Avl_tree_node< A_type >::Avl_tree_node( Avl_tree_node< A_type > &&/*another*/ ) noexcept {
//}

//template< class A_type >
//Avl_tree_node< A_type > &Avl_tree_node< A_type >::operator =( Avl_tree_node< A_type > &&another ) noexcept {
//	if ( &another == this ) return *this;

//	// move
//	return *this;
//}

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


} // namespace noding
} // namespace structing
} // namespace jmsf
